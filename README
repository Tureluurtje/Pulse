# Pulse

Pulse is a privacy-focused chat application designed for real-time messaging with private conversations. Built with security and simplicity in mind, Pulse ensures your communication stays safe while providing a modern messaging experience.

## Features

- Real-time messaging via WebSockets
- Private conversations with secure authentication
- User authentication with JWT tokens
- Message history stored securely in PostgreSQL
- Modern FastAPI backend with auto-generated API docs
- Optional frontend (React/FastAPI templates) for future expansion

## Quick Start

You can set up Pulse using automated scripts or manually. Cross-platform support is included.

### Automated Script Setup

**Linux/Mac:**

```bash
cd Pulse
./scripts/setup.sh
./scripts/run.sh
```

**Windows:**

```bat
cd Pulse
scripts\setup.bat
scripts\run.bat
```

### Manual Setup

1.  Clone the repository:

```bash
git clone https://github.com/yourusername/pulse.git
cd pulse
```

2.  Create and activate a Python virtual environment:

```bash
python -m venv venv
source venv/bin/activate   # Linux/Mac
venv\Scripts\activate      # Windows
```

3.  Install dependencies:

```bash
pip install -r requirements.txt
```

4.  Configure PostgreSQL (see Database Setup)
5.  Set environment variables (see Environment Variables)
6.  Run backend:

```bash
uvicorn asgi_app:app --host 0.0.0.0 --port 8000 --reload
```

Frontend is optional and can be added later under `frontend/`.

## Prerequisites

- Python 3.8+
- PostgreSQL 13+
- Optional: Node.js (for frontend development)

## Installation

### Using Scripts

**Linux/Mac:**

```bash
./scripts/setup.sh
./scripts/run.sh
```

**Windows:**

```bat
scripts\setup.bat
scripts\run.bat
```

### Manual Installation

Follow the **Manual Setup** instructions above.

## Database Setup

Create a PostgreSQL database and user:

```sql
CREATE DATABASE pulse_db;
CREATE USER pulse_user WITH ENCRYPTED DB_PASSWORD 'your_secure_password';
GRANT ALL PRIVILEGES ON DATABASE pulse_db TO pulse_user;
```

Run migrations or initialize tables using your backend service.

## Environment Variables

Create a `.env` file in the project root with the following:

```env
DATABASE_URL=postgresql://pulse_user:your_secure_password@localhost:5432/pulse_db
SECRET_KEY=your_super_secret_key
DEBUG=True
CORS_ORIGINS=http://localhost:3000
```

| Variable     | Description                       |
| ------------ | --------------------------------- |
| DATABASE_URL | PostgreSQL connection URL         |
| SECRET_KEY   | Secret key for JWT authentication |
| DEBUG        | Enable/disable debug mode         |
| CORS_ORIGINS | Allowed origins for CORS          |

## Running

### Using Scripts

**Linux/Mac:**

```bash
./scripts/run.sh
```

**Windows:**

```bat
scripts\run.bat
```

### Manual Execution

```bash
uvicorn asgi_app:app --host 0.0.0.0 --port 8000 --reload
```

API docs will be available at `http://localhost:8000/docs`
Redoc documentation available at `http://localhost:8000/redoc`

## Project Structure

````graphql
Pulse/
├── scripts/             # Setup and run scripts
│   ├── setup.sh
│   ├── setup.bat
│   ├── run.sh
│   └── run.bat
├── backend/             # FastAPI backend
│   ├── models/          # Database models
│   ├── routes/          # API route handlers
│   ├── services/        # Business logic
│   ├── sockets/         # WebSocket handlers
│   ├── tests/           # Backend tests
│   └── main.py          # FastAPI application entry point
├── frontend/            # Frontend (to be implemented)
│   ├── public/
│   ├── src/
│   └── templates/
├── docs/                # Documentation
├── requirements.txt     # Python dependencies
└── asgi_app.py          # ASGI application entry point

## Development

-   Run in development mode with hot reload:


```bash
uvicorn asgi_app:app --reload
````

- Run tests:

```bash
pytest backend/tests
```

- Database migrations (example with Alembic):

```bash
alembic revision --autogenerate -m "Initial migration"
alembic upgrade head
```

## API Documentation

FastAPI automatically generates documentation:

- Swagger UI: [http://localhost:8000/docs](http://localhost:8000/docs)
- Redoc: [http://localhost:8000/redoc](http://localhost:8000/redoc)

## Security Features

- Passwords hashed with **bcrypt**
- JWT-based authentication for API security
- WebSocket authentication for private messaging
- SQLAlchemy ORM to prevent SQL injection
- Optional HTTPS proxy for secure connections

## Contributing

1.  Fork the repository
2.  Create a new branch: `git checkout -b feature/my-feature`
3.  Commit your changes: `git commit -m 'Add new feature'`
4.  Push to the branch: `git push origin feature/my-feature`
5.  Create a pull request

Please follow coding standards and write tests for new features.

## License

See [LICENSE](LICENSE) for license details.

## Support

**Common issues:**

- **Database connection errors:** Ensure PostgreSQL is running and `.env` DATABASE_URL is correct
- **Port conflicts:** Change `uvicorn` port if 8000 is occupied
- **Import errors:** Ensure virtual environment is activated and dependencies installed

For further support, please open an issue in the repository.
